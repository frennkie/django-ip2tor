# Generated by Django 3.0.5 on 2020-04-15 16:38

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CLightningNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Is enabled?', verbose_name='Is enabled?')),
                ('is_alive', models.BooleanField(default=False, editable=False, help_text='Is alive?', verbose_name='Is alive?')),
                ('name', models.CharField(default='MyNode', help_text='A friendly name (e.g. LND on MyNode @ Home).', max_length=128, verbose_name='Name')),
                ('socket_path', models.CharField(default='C:\\Users\\Robbie\\.lightning\\lightning-rpc', help_text='Enter the unix socket path here. E.g. "~/.lightning/lightning-rpc"', max_length=255, verbose_name='Socket Path')),
            ],
            options={
                'verbose_name': 'c-lightning Node',
                'verbose_name_plural': 'c-lightning Nodes',
            },
        ),
        migrations.CreateModel(
            name='FakeNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Is enabled?', verbose_name='Is enabled?')),
                ('is_alive', models.BooleanField(default=False, editable=False, help_text='Is alive?', verbose_name='Is alive?')),
                ('name', models.CharField(default='MyNode', help_text='A friendly name (e.g. LND on MyNode @ Home).', max_length=128, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Fake Node',
                'verbose_name_plural': 'Fake Nodes',
            },
        ),
        migrations.CreateModel(
            name='LndRestNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Is enabled?', verbose_name='Is enabled?')),
                ('is_alive', models.BooleanField(default=False, editable=False, help_text='Is alive?', verbose_name='Is alive?')),
                ('name', models.CharField(default='MyNode', help_text='A friendly name (e.g. LND on MyNode @ Home).', max_length=128, verbose_name='Name')),
                ('hostname', models.CharField(default='localhost', help_text='Enter the hostname (FQDN) or IP address here. E.g. "localhost" or "127.0.0.1"', max_length=255, verbose_name='host')),
                ('tls_cert_verification', models.BooleanField(default=True, editable=False, help_text='Verify TLS connections using the provided certificate? Should *always* be *enabled* in production.', verbose_name='TLS Verification')),
                ('tls_cert', models.TextField(blank=True, help_text='PEM encoded TLS Certificate as string (not bytes).', max_length=4096, null=True, verbose_name='TLS Certificate')),
                ('macaroon_admin', models.CharField(blank=True, help_text='Hex encoded macaroon as string (not bytes).', max_length=4096, null=True, verbose_name='Macaroon (Admin)')),
                ('macaroon_invoice', models.CharField(blank=True, help_text='Hex encoded macaroon as string (not bytes).', max_length=4096, null=True, verbose_name='Macaroon (Invoice)')),
                ('macaroon_readonly', models.CharField(blank=True, help_text='Hex encoded macaroon as string (not bytes).', max_length=4096, null=True, verbose_name='Macaroon (Readonly)')),
                ('port', models.IntegerField(default=8080, help_text='Port REST interface. Must be in range 1 - 65535. Default: 8080.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='port')),
            ],
            options={
                'verbose_name': 'LND REST Node',
                'verbose_name_plural': 'LND REST Nodes',
            },
        ),
        migrations.CreateModel(
            name='LndGRpcNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Is enabled?', verbose_name='Is enabled?')),
                ('is_alive', models.BooleanField(default=False, editable=False, help_text='Is alive?', verbose_name='Is alive?')),
                ('name', models.CharField(default='MyNode', help_text='A friendly name (e.g. LND on MyNode @ Home).', max_length=128, verbose_name='Name')),
                ('hostname', models.CharField(default='localhost', help_text='Enter the hostname (FQDN) or IP address here. E.g. "localhost" or "127.0.0.1"', max_length=255, verbose_name='host')),
                ('tls_cert_verification', models.BooleanField(default=True, editable=False, help_text='Verify TLS connections using the provided certificate? Should *always* be *enabled* in production.', verbose_name='TLS Verification')),
                ('tls_cert', models.TextField(blank=True, help_text='PEM encoded TLS Certificate as string (not bytes).', max_length=4096, null=True, verbose_name='TLS Certificate')),
                ('macaroon_admin', models.CharField(blank=True, help_text='Hex encoded macaroon as string (not bytes).', max_length=4096, null=True, verbose_name='Macaroon (Admin)')),
                ('macaroon_invoice', models.CharField(blank=True, help_text='Hex encoded macaroon as string (not bytes).', max_length=4096, null=True, verbose_name='Macaroon (Invoice)')),
                ('macaroon_readonly', models.CharField(blank=True, help_text='Hex encoded macaroon as string (not bytes).', max_length=4096, null=True, verbose_name='Macaroon (Readonly)')),
                ('port', models.IntegerField(default=10009, help_text='Port gRPC interface. Must be in range 1 - 65535. Default: 10009.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='port')),
            ],
            options={
                'verbose_name': 'LND gRPC Node',
                'verbose_name_plural': 'LND gRPC Nodes',
                'unique_together': {('hostname', 'port')},
            },
        ),
    ]
